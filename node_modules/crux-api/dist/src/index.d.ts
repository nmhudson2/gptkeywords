/**
 * @typedef {{ key: string, fetch?: function }} CreateOptions
 * @typedef {{ url?: string, origin?: string, formFactor?: FormFactor, effectiveConnectionType?: Connection }} QueryRecordOptions
 * @typedef {'ALL_FORM_FACTORS' | 'PHONE' | 'DESKTOP' | 'TABLET'} FormFactor
 * @typedef {'4G' | '3G' | '2G' | 'slow-2G' | 'offline'} Connection
 * @typedef {{ histogram: { start: number | string, end: number | string, density: number }[], percentiles: { p75: number | string } }} MetricValue
 * @typedef {'first_contentful_paint' | 'largest_contentful_paint' | 'first_input_delay' | 'cumulative_layout_shift'} MetricName
 * @typedef {{ error: { code: number, message: string, status: string } }} ErrorResponse
 * @typedef {{
 *    record: {
 *      key: {
 *        url?: string,
 *        origin?: string,
 *        effectiveConnectionType?: Connection,
 *        formFactor?: FormFactor
 *      },
 *      metrics: {
 *        first_contentful_paint?: MetricValue,
 *        largest_contentful_paint?: MetricValue,
 *        first_input_delay?: MetricValue,
 *        cumulative_layout_shift?: MetricValue,
 *      }
 *    },
 *    urlNormalizationDetails?: {
 *      originalUrl: string,
 *      normalizedUrl: string
 *    }
 * }} SuccessResponse
 */
/**
 * Fetch CrUX API and handles 4xx errors.
 * Inspired by: https://github.com/GoogleChrome/CrUX/blob/master/js/crux-api-util.js
 *
 * @param {CreateOptions} createOptions
 */
export function createQueryRecord(createOptions: CreateOptions): (queryOptions: QueryRecordOptions, retryCounter?: number) => Promise<SuccessResponse | null>;
/**
 * Normalize URL to match CrUX API key.
 *
 * @param {string} url
 */
export function normalizeUrl(url: string): string;
/**
 * Random delay from 1ms to `maxRetryTimeout`.
 * Random logic is based on: https://stackoverflow.com/a/29246176
 *
 * @param {number} retryCounter
 * @param {function} request
 */
export function retryAfterTimeout(retryCounter: number, request: Function): Promise<any>;
export type CreateOptions = {
    key: string;
    fetch?: Function;
};
export type QueryRecordOptions = {
    url?: string;
    origin?: string;
    formFactor?: FormFactor;
    effectiveConnectionType?: Connection;
};
export type FormFactor = 'ALL_FORM_FACTORS' | 'PHONE' | 'DESKTOP' | 'TABLET';
export type Connection = '4G' | '3G' | '2G' | 'slow-2G' | 'offline';
export type MetricValue = {
    histogram: {
        start: number | string;
        end: number | string;
        density: number;
    }[];
    percentiles: {
        p75: number | string;
    };
};
export type MetricName = 'first_contentful_paint' | 'largest_contentful_paint' | 'first_input_delay' | 'cumulative_layout_shift';
export type ErrorResponse = {
    error: {
        code: number;
        message: string;
        status: string;
    };
};
export type SuccessResponse = {
    record: {
        key: {
            url?: string;
            origin?: string;
            effectiveConnectionType?: Connection;
            formFactor?: FormFactor;
        };
        metrics: {
            first_contentful_paint?: MetricValue;
            largest_contentful_paint?: MetricValue;
            first_input_delay?: MetricValue;
            cumulative_layout_shift?: MetricValue;
        };
    };
    urlNormalizationDetails?: {
        originalUrl: string;
        normalizedUrl: string;
    };
};
